apiVersion: v1
data:
  userdata: version: v1alpha1 # Indicates the schema used to decode the contents.
debug: false # Enable verbose logging to the console.
persist: true
# Provides machine specific configuration options.
machine:
    type: controlplane # Defines the role of the machine within the cluster.
    token: 6r6srw.q7skgg96f1yi7upg # The `token` is used by a machine to join the PKI of the cluster.
    # The root certificate authority of the PKI.
    ca:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJQakNCOGFBREFnRUNBaEJlVjErejlwRG9TM3pRMWI2UjdLb2xNQVVHQXl0bGNEQVFNUTR3REFZRFZRUUsKRXdWMFlXeHZjekFlRncweU5ERXdNamt3T1RBek5ESmFGdzB6TkRFd01qY3dPVEF6TkRKYU1CQXhEakFNQmdOVgpCQW9UQlhSaGJHOXpNQ293QlFZREsyVndBeUVBTSthNlRsMUpLaUQ3aUswUlgxWHZnVjc5NWNKZnBwMnV5Y3gxCkQ4S1BGZFdqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVeFVNRUowRis3djB4L3hYUQppS3VaSWJoZGYzNHdCUVlESzJWd0EwRUFvTElIS1FvbElZcUk4clFMOHFHTXJNYkhIcXEzOEZXbzZ5dk9VZEVPCnlDeTRqTkd0VlZHYnFSZ0FlU3FyNDlQc1JyOWw3RjIvUkVXS0tDRldleUhnQXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0KTUM0Q0FRQXdCUVlESzJWd0JDSUVJRTlDeXBuTVJmYW84aGl1S3k2blFaWW04WGVJanFsaUIra2lDLzJ6UndDdQotLS0tLUVORCBFRDI1NTE5IFBSSVZBVEUgS0VZLS0tLS0K
    # Extra certificate subject alternative names for the machine's certificate.
    certSANs: []
    #   # Uncomment this to enable SANs.
    #   - 10.0.0.10
    #   - 172.16.0.10
    #   - 192.168.0.10

    # Used to provide additional options to the kubelet.
    kubelet:
        image: ghcr.io/siderolabs/kubelet:v1.31.1 # The `image` field is an optional reference to an alternative kubelet image.
        defaultRuntimeSeccompProfileEnabled: true # Enable container runtime default Seccomp profile.
        disableManifestsDirectory: true # The `disableManifestsDirectory` field configures the kubelet to get static pod manifests from the /etc/kubernetes/manifests directory.
        
        # # The `ClusterDNS` field is an optional reference to an alternative kubelet clusterDNS ip list.
        # clusterDNS:
        #     - 10.96.0.10
        #     - 169.254.2.53

        # # The `extraArgs` field is used to provide additional flags to the kubelet.
        # extraArgs:
        #     key: value

        # # The `extraMounts` field is used to add additional mounts to the kubelet container.
        # extraMounts:
        #     - destination: /var/lib/example # Destination is the absolute path where the mount will be placed in the container.
        #       type: bind # Type specifies the mount kind.
        #       source: /var/lib/example # Source specifies the source path of the mount.
        #       # Options are fstab style mount options.
        #       options:
        #         - bind
        #         - rshared
        #         - rw

        # # The `extraConfig` field is used to provide kubelet configuration overrides.
        # extraConfig:
        #     serverTLSBootstrap: true

        # # The `KubeletCredentialProviderConfig` field is used to provide kubelet credential configuration.
        # credentialProviderConfig:
        #     apiVersion: kubelet.config.k8s.io/v1
        #     kind: CredentialProviderConfig
        #     providers:
        #         - apiVersion: credentialprovider.kubelet.k8s.io/v1
        #           defaultCacheDuration: 12h
        #           matchImages:
        #             - '*.dkr.ecr.*.amazonaws.com'
        #             - '*.dkr.ecr.*.amazonaws.com.cn'
        #             - '*.dkr.ecr-fips.*.amazonaws.com'
        #             - '*.dkr.ecr.us-iso-east-1.c2s.ic.gov'
        #             - '*.dkr.ecr.us-isob-east-1.sc2s.sgov.gov'
        #           name: ecr-credential-provider

        # # The `nodeIP` field is used to configure `--node-ip` flag for the kubelet.
        # nodeIP:
        #     # The `validSubnets` field configures the networks to pick kubelet node IP from.
        #     validSubnets:
        #         - 10.0.0.0/8
        #         - '!10.0.0.3/32'
        #         - fdc7::/16
    # Provides machine specific network configuration options.
    network: 
      hostname: talos-cp01
    # # `interfaces` is used to define the network interface configuration.
    # interfaces:
    #     - interface: enp0s1 # The interface name.
    #       # Assigns static IP addresses to the interface.
    #       addresses:
    #         - 192.168.2.0/24
    #       # A list of routes associated with the interface.
    #       routes:
    #         - network: 0.0.0.0/0 # The route's network (destination).
    #           gateway: 192.168.2.1 # The route's gateway (if empty, creates link scope route).
    #           metric: 1024 # The optional metric for the route.
    #       mtu: 1500 # The interface's MTU.
    #       
    #       # # Picks a network device using the selector.

    #       # # select a device with bus prefix 00:*.
    #       # deviceSelector:
    #       #     busPath: 00:* # PCI, USB bus prefix, supports matching by wildcard.
    #       # # select a device with mac address matching `*:f0:ab` and `virtio` kernel driver.
    #       # deviceSelector:
    #       #     hardwareAddr: '*:f0:ab' # Device hardware address, supports matching by wildcard.
    #       #     driver: virtio # Kernel driver, supports matching by wildcard.
    #       # # select a device with bus prefix 00:*, a device with mac address matching `*:f0:ab` and `virtio` kernel driver.
    #       # deviceSelector:
    #       #     - busPath: 00:* # PCI, USB bus prefix, supports matching by wildcard.
    #       #     - hardwareAddr: '*:f0:ab' # Device hardware address, supports matching by wildcard.
    #       #       driver: virtio # Kernel driver, supports matching by wildcard.

    #       # # Bond specific options.
    #       # bond:
    #       #     # The interfaces that make up the bond.
    #       #     interfaces:
    #       #         - enp2s0
    #       #         - enp2s1
    #       #     # Picks a network device using the selector.
    #       #     deviceSelectors:
    #       #         - busPath: 00:* # PCI, USB bus prefix, supports matching by wildcard.
    #       #         - hardwareAddr: '*:f0:ab' # Device hardware address, supports matching by wildcard.
    #       #           driver: virtio # Kernel driver, supports matching by wildcard.
    #       #     mode: 802.3ad # A bond option.
    #       #     lacpRate: fast # A bond option.

    #       # # Bridge specific options.
    #       # bridge:
    #       #     # The interfaces that make up the bridge.
    #       #     interfaces:
    #       #         - enxda4042ca9a51
    #       #         - enxae2a6774c259
    #       #     # A bridge option.
    #       #     stp:
    #       #         enabled: true # Whether Spanning Tree Protocol (STP) is enabled.

    #       # # Indicates if DHCP should be used to configure the interface.
    #       # dhcp: true

    #       # # DHCP specific options.
    #       # dhcpOptions:
    #       #     routeMetric: 1024 # The priority of all routes received via DHCP.

    #       # # Wireguard specific configuration.

    #       # # wireguard server example
    #       # wireguard:
    #       #     privateKey: ABCDEF... # Specifies a private key configuration (base64 encoded).
    #       #     listenPort: 51111 # Specifies a device's listening port.
    #       #     # Specifies a list of peer configurations to apply to a device.
    #       #     peers:
    #       #         - publicKey: ABCDEF... # Specifies the public key of this peer.
    #       #           endpoint: 192.168.1.3 # Specifies the endpoint of this peer entry.
    #       #           # AllowedIPs specifies a list of allowed IP addresses in CIDR notation for this peer.
    #       #           allowedIPs:
    #       #             - 192.168.1.0/24
    #       # # wireguard peer example
    #       # wireguard:
    #       #     privateKey: ABCDEF... # Specifies a private key configuration (base64 encoded).
    #       #     # Specifies a list of peer configurations to apply to a device.
    #       #     peers:
    #       #         - publicKey: ABCDEF... # Specifies the public key of this peer.
    #       #           endpoint: 192.168.1.2:51822 # Specifies the endpoint of this peer entry.
    #       #           persistentKeepaliveInterval: 10s # Specifies the persistent keepalive interval for this peer.
    #       #           # AllowedIPs specifies a list of allowed IP addresses in CIDR notation for this peer.
    #       #           allowedIPs:
    #       #             - 192.168.1.0/24

    #       # # Virtual (shared) IP address configuration.

    #       # # layer2 vip example
    #       # vip:
    #       #     ip: 172.16.199.55 # Specifies the IP address to be used.

    # # Used to statically set the nameservers for the machine.
    # nameservers:
    #     - 8.8.8.8
    #     - 1.1.1.1

    # # Allows for extra entries to be added to the `/etc/hosts` file
    # extraHostEntries:
    #     - ip: 192.168.1.100 # The IP of the host.
    #       # The host alias.
    #       aliases:
    #         - example
    #         - example.domain.tld

    # # Configures KubeSpan feature.
    # kubespan:
    #     enabled: true # Enable the KubeSpan feature.

    # Used to provide instructions for installations.
    install:
        disk: /dev/vdb # The disk used for installations.
        image: ghcr.io/siderolabs/installer:v1.8.1 # Allows for supplying the image used to perform the installation.
        wipe: true # Indicates if the installation disk should be wiped at installation time.
        
        # # Look up disk using disk attributes like model, size, serial and others.
        # diskSelector:
        #     size: 4GB # Disk size.
        #     model: WDC* # Disk model `/sys/block/<dev>/device/model`.
        #     busPath: /pci0000:00/0000:00:17.0/ata1/host0/target0:0:0/0:0:0:0 # Disk bus path.

        # # Allows for supplying extra kernel args via the bootloader.
        # extraKernelArgs:
        #     - talos.platform=metal
        #     - reboot=k

        # # Allows for supplying additional system extension images to install on top of base Talos image.
        # extensions:
        #     - image: ghcr.io/siderolabs/gvisor:20220117.0-v1.0.0 # System extension image.
    # Used to configure the machine's container image registry mirrors.
    registries: {}
    # # Specifies mirror configuration for each registry host namespace.
    # mirrors:
    #     ghcr.io:
    #         # List of endpoints (URLs) for registry mirrors to use.
    #         endpoints:
    #             - https://registry.insecure
    #             - https://ghcr.io/v2/

    # # Specifies TLS & auth configuration for HTTPS image registries.
    # config:
    #     registry.insecure:
    #         # The TLS configuration for the registry.
    #         tls:
    #             insecureSkipVerify: true # Skip TLS server certificate verification (not recommended).
    #             
    #             # # Enable mutual TLS authentication with the registry.
    #             # clientIdentity:
    #             #     crt: LS0tIEVYQU1QTEUgQ0VSVElGSUNBVEUgLS0t
    #             #     key: LS0tIEVYQU1QTEUgS0VZIC0tLQ==
    #         
    #         # # The auth configuration for this registry.
    #         # auth:
    #         #     username: username # Optional registry authentication.
    #         #     password: password # Optional registry authentication.

    # Features describe individual Talos features that can be switched on or off.
    features:
        rbac: true # Enable role-based access control (RBAC).
        stableHostname: true # Enable stable default hostname.
        apidCheckExtKeyUsage: true # Enable checks for extended key usage of client certificates in apid.
        diskQuotaSupport: true # Enable XFS project quota support for EPHEMERAL partition and user disks.
        # KubePrism - local proxy/load balancer on defined port that will distribute
        kubePrism:
            enabled: true # Enable KubePrism support - will start local load balancing proxy.
            port: 7445 # KubePrism port.
        # Configures host DNS caching resolver.
        hostDNS:
            enabled: true # Enable host DNS caching resolver.
            forwardKubeDNSToHost: true # Use the host DNS resolver as upstream for Kubernetes CoreDNS pods.
        
        # # Configure Talos API access from Kubernetes pods.
        # kubernetesTalosAPIAccess:
        #     enabled: true # Enable Talos API access from Kubernetes pods.
        #     # The list of Talos API roles which can be granted for access from Kubernetes pods.
        #     allowedRoles:
        #         - os:reader
        #     # The list of Kubernetes namespaces Talos API access is available from.
        #     allowedKubernetesNamespaces:
        #         - kube-system
    # Configures the node labels for the machine.
    nodeLabels:
        node.kubernetes.io/exclude-from-external-load-balancers: ""
    
    # # Provides machine specific control plane configuration options.

    # # ControlPlane definition example.
    # controlPlane:
    #     # Controller manager machine specific configuration options.
    #     controllerManager:
    #         disabled: false # Disable kube-controller-manager on the node.
    #     # Scheduler machine specific configuration options.
    #     scheduler:
    #         disabled: true # Disable kube-scheduler on the node.

    # # Used to provide static pod definitions to be run by the kubelet directly bypassing the kube-apiserver.

    # # nginx static pod.
    # pods:
    #     - apiVersion: v1
    #       kind: pod
    #       metadata:
    #         name: nginx
    #       spec:
    #         containers:
    #             - image: nginx
    #               name: nginx

    # # Used to partition, format and mount additional disks.

    # # MachineDisks list example.
    # disks:
    #     - device: /dev/sdb # The name of the disk to use.
    #       # A list of partitions to create on the disk.
    #       partitions:
    #         - mountpoint: /var/mnt/extra # Where to mount the partition.
    #           
    #           # # The size of partition: either bytes or human readable representation. If `size:` is omitted, the partition is sized to occupy the full disk.

    #           # # Human readable representation.
    #           # size: 100 MB
    #           # # Precise value in bytes.
    #           # size: 1073741824

    # # Allows the addition of user specified files.

    # # MachineFiles usage example.
    # files:
    #     - content: '...' # The contents of the file.
    #       permissions: 0o666 # The file's permissions in octal.
    #       path: /tmp/file.txt # The path of the file.
    #       op: append # The operation to use

    # # The `env` field allows for the addition of environment variables.

    # # Environment variables definition examples.
    # env:
    #     GRPC_GO_LOG_SEVERITY_LEVEL: info
    #     GRPC_GO_LOG_VERBOSITY_LEVEL: "99"
    #     https_proxy: http://SERVER:PORT/
    # env:
    #     GRPC_GO_LOG_SEVERITY_LEVEL: error
    #     https_proxy: https://USERNAME:PASSWORD@SERVER:PORT/
    # env:
    #     https_proxy: http://DOMAIN\USERNAME:PASSWORD@SERVER:PORT/

    # # Used to configure the machine's time settings.

    # # Example configuration for cloudflare ntp server.
    # time:
    #     disabled: false # Indicates if the time service is disabled for the machine.
    #     # description: |
    #     servers:
    #         - time.cloudflare.com
    #     bootTimeout: 2m0s # Specifies the timeout when the node time is considered to be in sync unlocking the boot sequence.

    # # Used to configure the machine's sysctls.

    # # MachineSysctls usage example.
    # sysctls:
    #     kernel.domainname: talos.dev
    #     net.ipv4.ip_forward: "0"
    #     net/ipv6/conf/eth0.100/disable_ipv6: "1"

    # # Used to configure the machine's sysfs.

    # # MachineSysfs usage example.
    # sysfs:
    #     devices.system.cpu.cpu0.cpufreq.scaling_governor: performance

    # # Machine system disk encryption configuration.
    # systemDiskEncryption:
    #     # Ephemeral partition encryption.
    #     ephemeral:
    #         provider: luks2 # Encryption provider to use for the encryption.
    #         # Defines the encryption keys generation and storage method.
    #         keys:
    #             - # Deterministically generated key from the node UUID and PartitionLabel.
    #               nodeID: {}
    #               slot: 0 # Key slot number for LUKS2 encryption.
    #               
    #               # # KMS managed encryption key.
    #               # kms:
    #               #     endpoint: https://192.168.88.21:4443 # KMS endpoint to Seal/Unseal the key.
    #         
    #         # # Cipher kind to use for the encryption. Depends on the encryption provider.
    #         # cipher: aes-xts-plain64

    #         # # Defines the encryption sector size.
    #         # blockSize: 4096

    #         # # Additional --perf parameters for the LUKS2 encryption.
    #         # options:
    #         #     - no_read_workqueue
    #         #     - no_write_workqueue

    # # Configures the udev system.
    # udev:
    #     # List of udev rules to apply to the udev system
    #     rules:
    #         - SUBSYSTEM=="drm", KERNEL=="renderD*", GROUP="44", MODE="0660"

    # # Configures the logging system.
    # logging:
    #     # Logging destination.
    #     destinations:
    #         - endpoint: tcp://1.2.3.4:12345 # Where to send logs. Supported protocols are "tcp" and "udp".
    #           format: json_lines # Logs format.

    # # Configures the kernel.
    # kernel:
    #     # Kernel modules to load.
    #     modules:
    #         - name: brtfs # Module name.

    # # Configures the seccomp profiles for the machine.
    # seccompProfiles:
    #     - name: audit.json # The `name` field is used to provide the file name of the seccomp profile.
    #       # The `value` field is used to provide the seccomp profile.
    #       value:
    #         defaultAction: SCMP_ACT_LOG

    # # Configures the node annotations for the machine.

    # # node annotations example.
    # nodeAnnotations:
    #     customer.io/rack: r13a25

    # # Configures the node taints for the machine. Effect is optional.

    # # node taints example.
    # nodeTaints:
    #     exampleTaint: exampleTaintValue:NoSchedule
# Provides cluster specific configuration options.
cluster:
    id: tUFP0DqCgksKckQMlVys1yk2FJO6catpBmXPLdrSVfg= # Globally unique identifier for this cluster (base64 encoded random 32 bytes).
    secret: tQMgiQzjGQLoqTjBIf2J7FJGzI5OZRj+wjIDQuCTOR8= # Shared secret of cluster (base64 encoded random 32 bytes).
    # Provides control plane specific configuration options.
    controlPlane:
        endpoint: https://10.42.0.10:8443 # Endpoint is the canonical controlplane endpoint, which can be an IP address or a DNS hostname.
    clusterName: oemc # Configures the cluster's name.
    # Provides cluster specific network configuration options.
    network:
        dnsDomain: cluster.local # The domain used by Kubernetes DNS.
        # The pod subnet CIDR.
        podSubnets:
            - 10.244.0.0/16
        # The service subnet CIDR.
        serviceSubnets:
            - 10.96.0.0/12
        
        # # The CNI used.
        # cni:
        #     name: custom # Name of CNI to use.
        #     # URLs containing manifests to apply for the CNI.
        #     urls:
        #         - https://docs.projectcalico.org/archive/v3.20/manifests/canal.yaml
    token: 7m5bma.clcwvk2zjgi27kav # The [bootstrap token](https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/) used to join the cluster.
    secretboxEncryptionSecret: k5TbjCrXp1GWKcNM9yEd/BNOUC312jH0sbkR2AnX8kQ= # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
    # The base64 encoded root certificate authority used by Kubernetes.
    ca:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpakNDQVMrZ0F3SUJBZ0lRY0xsYVVmTFBBbnU2T3lkdE5IeW41REFLQmdncWhrak9QUVFEQWpBVk1STXcKRVFZRFZRUUtFd3ByZFdKbGNtNWxkR1Z6TUI0WERUSTBNVEF5T1RBNU1ETTBNbG9YRFRNME1UQXlOekE1TURNMApNbG93RlRFVE1CRUdBMVVFQ2hNS2EzVmlaWEp1WlhSbGN6QlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VICkEwSUFCT25mbUtiREEwQ3lxREZucndaMjh3RCtOMXo1L3ZaSkE1cWRsRHhMbjhUSURkeXNRSVpSS2trbXNtYWcKaVhvQkltb3Nmckw1R3dBNXQ3RC9Ed3RsR3hPallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWRCZ05WSFNVRQpGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFCkZnUVVnTzR3T0RFZXFHUUx1czJQUVFxNGRCUnJxQ1F3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loQUx0M1dvc3IKN1lIOXZYOE5ubDQ1TlV2MUhVTVJKMmFKYXJyNTJsUG04UE5wQWlFQW1mVnduMUdpck9jczBCa05WYmpHOHQ4KwpLbVV0N2lhK1RQeHQ5cTZrY0d3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUppYXIvcVhhRVNSUC9DcExiWmdJNEJGd0RCMnJOL3NWb0tjSWVKMHBXOGVvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFNmQrWXBzTURRTEtvTVdldkJuYnpBUDQzWFBuKzlra0RtcDJVUEV1ZnhNZ04zS3hBaGxFcQpTU2F5WnFDSmVnRWlhaXgrc3ZrYkFEbTNzUDhQQzJVYkV3PT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded aggregator certificate authority used by Kubernetes for front-proxy certificate generation.
    aggregatorCA:
        crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJZRENDQVFXZ0F3SUJBZ0lRSVFONUNqOUdUdktQVGt4SEJORzlRekFLQmdncWhrak9QUVFEQWpBQU1CNFgKRFRJME1UQXlPVEE1TURNME1sb1hEVE0wTVRBeU56QTVNRE0wTWxvd0FEQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxRwpTTTQ5QXdFSEEwSUFCUFJ5dSsxODlMOUZzVmNIQjZnS1BkRDBTUGJlQ3gyNy93MkY1Qk0zVGJtTWZ5L01CYXdoCklYUjdsanBpR3RZZDB6b1VEcEFJMVo0VHBVZHoyZDN5bWZtallUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ2hEQWQKQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZApCZ05WSFE0RUZnUVVsYXFOOTdra0JRVnVnTWVQbGZvck1oT2lzRUF3Q2dZSUtvWkl6ajBFQXdJRFNRQXdSZ0loCkFQcE5YdDA3UEhkWnpuK0JFVnZzTmEzd0kvTDM5bU1ST2FwYnRoQTVWTVRZQWlFQXE5Si8rdENrWkJtTEZiaU0KWTZhb1poT0VScDdNVVdBaXJPWDlzd3VUSWtjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUlIaUJseVphSU9VakM0T0FRNGFEYW5jOVhiUTBYNlBhZkUyYjMzSkxVSDdvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFOUhLNzdYejB2MFd4VndjSHFBbzkwUFJJOXQ0TEhidi9EWVhrRXpkTnVZeC9MOHdGckNFaApkSHVXT21JYTFoM1RPaFFPa0FqVm5oT2xSM1BaM2ZLWitRPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
    # The base64 encoded private key for service account token generation.
    serviceAccount:
        key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS2dJQkFBS0NBZ0VBeHphNE1kTWZyUHZEYW9uOFFEdHRwNGRNK3FSdC80M0tpRzFIVDhabm5kb0haVHIyCnpid3hiSi9Qd3IrUEFPWE1xQUJDdEhVWG5QNFNaYlQ3TmhLVEFHc0x4Z0pjRGM3SEM2ZzRyU25tMGhKRy9KNkoKdnBPc1NIUU0rbEZVbTlUUmI3WXJXWnFqUXV1anRhQ3NTcGpRM2taSnZkMFY3Vm9wcjFBbDBMVzdpN3dSdk1kMgpOWElnbWlqWFhHcTNDVDcwcmJwT29WcjF6ZTdKUW56K0FHdUwrVjBrbTlVWnNCMUxvdnYwUnlFbFhidVIxbkVwCnBWU2ZpcnFjMHNVWExYQm5MMGQzSFZxdjFKWS9KNVJpUlFSQklkYlh6cTVWbDBEaU5SdDJJcFB5ZEZiTTFyVDcKY0hEVDRuUFpyL3BBRHcxc2pHMTdyaEpCajV5NVRoQkdoUTd4ZEdDc2cvcm93bEhBNTVTSmF1UjJVc3hhWWpmSgpwYzZnTFdhWTZ0a3VuWjNTY2hSaGlLRXlldkNUSzFSNUNQSkZtZ09VaDM2a0p0WTNtSjhjbUlZVHZlVjFmd3FGCks3N0M4SncvRmZITUlXbGRLdWJJM21mc0t3ak01K0QvajhUUVRKSXN2OXFvUWhQQURzbUtXL1dxU2RMWVNFOGIKY2JTUXFjUWZSZVZQd0ZPZk5oL253cWltTEJkejFwUHdDWWswM0xOaEJoVXErVEkwN2t6V2NGUkozSnNTcllOWgo4SkFBNzJTS2NqSGcvandNaHNSYko2WStMNWdDd3UweDVtWmRvREx4Y0xPd1pnNGVPaWs3Ykx6L2UvbTNzYTZ5ClRmcVRGZDNteDVKT1E2UkJJUXFGU3Z5QitQV0I5SEFGdmhOZktBYmo0TFp1YzR5T2lFTk1QU2F5ekIwQ0F3RUEKQVFLQ0FnRUFvdTI5K0FJVUJnWmk3Tit0ejFyTGRCalVmS20relNQS1lZbitxT0E4SG40VFRsZkxRcmlJTTY4QQozT2FPcnMxRGRLUEI2cFZabXF5eG56MUZ1Qk80NXI2bUFtd3JuWjlnYThoSmtsYVMwWHpoVWZyWDdXWVpvYWhJCmRQSFBvU09OcHkvMmhISlUxSWFrZmdmSzRiZmFHL0NnbndnU3h1elc2dXRDQWxDZjhzaitPTWRwaG95dzNXUkoKdnV3SWh5ZFdOa0FKenkzMW0xZVFnekIzRFNEb2Vpb1RwdC9EQXFiekZYbTdiL0ZML2oxS0tYaWo5dlFmQi9kWQpDNG5tU3VPRGdNZVNSQS9IZnJiak1Cdkx3MmFYWG5XNFN2R0tUd3BoOTgxZDhTblBRaGM3c042VVJvSUF5VlMyCjFaWjJqZGtNemswOHVrRjBIV0N3cllmaUpURHppQ2tFbTJEcXdiQjFKZXJlY2NGejdvenNPUEhaN0lwV05YV1QKZnZ1YStOZnBrdVpBanIwZjAwVjU3ZlJWaUxqanl3c2hKQXNWMzRmTFdGdkszZVhEQ0NDdm5tdW8zZFhmOGZMUwo2QWN4cFhyTU4rcFh3aVg5RVgzbGh2SlBBTHd6SWJhQTdGaEJ6RTRwbFFLSXc1Ym1kV1dHNVZONlRwS3ZtaitGCkQwNzZ0ZFNSLzRPRCtkbnRjQkpVSjh2dEp5MW93eGZvQVAvQ1JrTkc2a3NlTEozQTUzb1pBOVZoVkEzQkV4OFEKKzVsUkpFWDJNZkhWMjNURXkxTFFkeG5QYjBqWTIrdmprd2VBay95NnNyMHhNajM2a1RoZ1JUeCt2cVpxUE1ZeQpsaDlaY2p6bUxjRlhWb3k1YUI1OXBwdzI2bUdGWnpzMDVVNCtONkRLVzRxUXZieEtqQUVDZ2dFQkFOVWcvc0xoCk5Ga0lmQ25YUE5MbmJZOTNDelVXS0hWa3VBemlHMWdrZXkwNlM3MkdEQmFoSTBqRWJ5Ti8vZlMwMXpHTWZ4RTIKUlUrMndDTXFtSE1oM2dxYnVIdlhNV0hCZ2oxUWdtYUVDNjFBVmJEZzRNOTB6eEQzSHRwSmM1TGhEZkZuMVFMRQpneEN1emRnZzJLMHExOTJIdlhKSW0wMVpJOW15THlHeUsvbC9aWXpoTFJ6b09TT1lZcWRUdFVDSjhHWWdGYU16CjdlZ2JnTytIT1pWYTJ2SUhrSkNYQWtGRXNiMG9jYUdmbmZiQ0pUakdnTUJ3VFlNb3dHSFJpVHBnYzRLekhadzIKU0VtcUVUaDFJKytrbUFabURERXdGQ1h4bk9aeXhDVmZVYnA1VDFNejFIV2dKUEUrK0JPR1FPUHhKV3pEMXIycwpGWXNBaVM3RnJKVkMvQ2tDZ2dFQkFPOUpLeXdVT2oyS1R5UmU1b3E2MWZNL0Eyc21sU3VzanRGWGZ1TXdaZzVQCk1nZzA4ckhHNk5ML1BuMzhSRHdyR3oyNDhiL1dONVZHeEcyM1YycXJDNHhWSGs3Q2FhSkFOWlEvbXBwS0tnQ20Kd1JUUm5lNWRITGZXL0J6RWllQ3ZFRVhSdmZFeFhXMHZDcURnMlMyMEhXSC9vL1JjcjRWVmtlcmpVQ0o2anAvSApyM1dEQVU0ZFJWVUtac2V0V3dqYjU0K0lDcklqOHZaSVNISG0zZENaRm5oSlU3OWlTeWppU3ZNcmR4MXFNZG5mCmxtTlkrNFNaZGNMTWcxWUJhTkwvNXlBZkpyZG5DSWs4ZEN5cTJtSFpxK3dOVnhuWE9jNVNjUERPME1CT3NHU0wKUHM0UkFVaEx5L1I5OUwrelJOTXh3RVMxVzJzUVNSS0NqUjRZZTdoZXp0VUNnZ0VCQU16NnNldE9XMkZ4NXJENwpJTFdhL1dWbzBlK1p3d204OThMMFIrWkxGK2pVMDNtUkRkbEoyenltS0ZuVlJMTndwak15ZEJkaXdlQzczQ2syClUyOFAySlVOVmE1TnRtSFZrZVJVcFVYaG83VmFWZEFMU0V4ZWhMUkZhSGY3QXR2MTljb0MyZnlTY1plKzk1engKWWxPU0RCRTA5d0NPVWtkZS96cmx3Nnk5eHN0c09vZjNIY05hbVhIaG9xaFp1czQ2bkdvc1c0TWVjNmF6cFJzNgpUQ2lZUEZGZzh5b05Bbzh4ZVZ4N0pHYVV0SUZhRWlCNzBlTERYOWxRZlU3WER3dUZMak02LzdSNUJLZE1tTWxhCjZGZ1lUbHFCRlNMTm9lTW9jSVczUld6SU16dU1acjJYOExPOGRTdE5LNXpqbDA5alkySXJMRUk1Mm5KWTdwZDgKYU5NWm5Ka0NnZ0VBZGVnaTZzeG95a3d0cFNsU0JrZjhCcWtsSVJaWTZMVlZobGZMd1Z6bTNPUXZMaFlSQklLVAoxT3hLdWIrbFM5U2R6ck1rQkRnbEdWeE9qQldNY0pZcDBaTmJwTWx0VGJLLzgvWEhVNEY1NHVwSU45NzJLQzhmCmFJTDVwWjgrcFVUK0NybElFK0lVUENteTNnVU5YdFRpcVpoVERLVGpKQnMvRkhPLzE4MTJHOHRFYk80SnBaa00Kd2RPblEzcnJZWmtpSi9xTDhxMStHZGNTUTNYVUZPWnFTUWt3eUJ4Q0Zyb3kzbEdybHdYdDNJS3MwdlZVc2tqLwoydVgxVFZyU2NTNEJrRFZwV1hQZW8ranpBZE9LV2k3czVSckpzWVQ1Q2U1YmtuMEdKY3hnWkpxc2J0TzRRd3grClNsSUtXSytZR1V6cGhiR3Jneno2RkxIWm9WdkZFdHM4cFFLQ0FRRUFsOHBUaWFKV3E1MXFjNGNHZVdPSEExTkEKR3o0dGJoWlgzdUlkY0JxdXF5QXlNMG80c215NUdkbm4xV0kzRS9lWllNMERRRDBnWVZybHkvTXAwdjJ5NkdNTgp2TGI2MzNHSE5LbUZpZTQ3RzFzVlpXYlQzUmJYR0E5TTBDQk9peE15YUlrRWlhWSt2eFpIUFBKSUxBdjJxUDlGCjd6eW5welVwRjk1VWlVRG5wbkxtVDBza3pFNG5VcFpuZW05bERDeG9YajJVUE1EbDkxSS83bk0vNUNxMUJWeVkKTWJjVjFOWDNlbzIzQ0hSbS9lSzMzK1VxSGlWcktlMDFkYkpjL3NHeHFrL1V5V1VmQ3lnT0NKcnZVeFVFaXJ6Vgo5c2xFSDZUc1piNjkwcEZqdVhyUnZJUXZlbGFhV0pua05GaktwY0VEQ05IdU1kdXpKeCtyQkVVVUlVNjFQQT09Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
    # API server specific configuration options.
    apiServer:
        image: registry.k8s.io/kube-apiserver:v1.31.1 # The container image used in the API server manifest.
        # Extra certificate subject alternative names for the API server's certificate.
        certSANs:
            - 10.42.0.10
        disablePodSecurityPolicy: true # Disable PodSecurityPolicy in the API server and default manifests.
        # Configure the API server admission plugins.
        admissionControl:
            - name: PodSecurity # Name is the name of the admission controller.
              # Configuration is an embedded configuration object to be used as the plugin's
              configuration:
                apiVersion: pod-security.admission.config.k8s.io/v1alpha1
                defaults:
                    audit: restricted
                    audit-version: latest
                    enforce: baseline
                    enforce-version: latest
                    warn: restricted
                    warn-version: latest
                exemptions:
                    namespaces:
                        - kube-system
                    runtimeClasses: []
                    usernames: []
                kind: PodSecurityConfiguration
        # Configure the API server audit policy.
        auditPolicy:
            apiVersion: audit.k8s.io/v1
            kind: Policy
            rules:
                - level: Metadata
    # Controller manager server specific configuration options.
    controllerManager:
        image: registry.k8s.io/kube-controller-manager:v1.31.1 # The container image used in the controller manager manifest.
    # Kube-proxy server-specific configuration options
    proxy:
        image: registry.k8s.io/kube-proxy:v1.31.1 # The container image used in the kube-proxy manifest.
        
        # # Disable kube-proxy deployment on cluster bootstrap.
        # disabled: false
    # Scheduler server specific configuration options.
    scheduler:
        image: registry.k8s.io/kube-scheduler:v1.31.1 # The container image used in the scheduler manifest.
    # Configures cluster member discovery.
    discovery:
        enabled: true # Enable the cluster membership discovery feature.
        # Configure registries used for cluster member discovery.
        registries:
            # Kubernetes registry uses Kubernetes API server to discover cluster members and stores additional information
            kubernetes:
                disabled: true # Disable Kubernetes discovery registry.
            # Service registry is using an external service to push and pull information about cluster members.
            service: {}
            # # External service endpoint.
            # endpoint: https://discovery.talos.dev/
    # Etcd specific configuration options.
    etcd:
        # The `ca` is the root certificate authority of the PKI.
        ca:
            crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJmVENDQVNPZ0F3SUJBZ0lRWDZsajJXTWpyNWMweDBpSG5CdUkrakFLQmdncWhrak9QUVFEQWpBUE1RMHcKQ3dZRFZRUUtFd1JsZEdOa01CNFhEVEkwTVRBeU9UQTVNRE0wTWxvWERUTTBNVEF5TnpBNU1ETTBNbG93RHpFTgpNQXNHQTFVRUNoTUVaWFJqWkRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkU3T2VRNmJlZjM0ClFzelBBZCtSSmQ0SlgrY1FXTXlEMEVFSy9TRklNN1UyQjVCTTlLU3kvNitXeERmWTRhME9VK2t3dG54U0E1NU0Ka2RaSS9QMWttRGFqWVRCZk1BNEdBMVVkRHdFQi93UUVBd0lDaERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjRApBUVlJS3dZQkJRVUhBd0l3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVUm9uSERXNjBrT3lLCk5DdW1IZzVZc2xobDUyd3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdOa05hYVcxeEQ5aTNmeCtXMWc5VFlURjMKaWlaZ0JQVXRzcVhiVUp4S3RyRUNJUUNQbXNKQUxZNGw0MVpNVGVwNnFJSEJKUUhGVk90SGRXaFp0NWplck9XagpMQT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
            key: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSUJEYTJ0OHVxSWVDbWVNc0tsNlRTRDdVVURNdW15SVU2VHZrVXJQYThXd1BvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFVHM1NURwdDUvZmhDek04QjM1RWwzZ2xmNXhCWXpJUFFRUXI5SVVnenRUWUhrRXowcExMLwpyNWJFTjlqaHJRNVQ2VEMyZkZJRG5reVIxa2o4L1dTWU5nPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
        
        # # The container image used to create the etcd service.
        # image: gcr.io/etcd-development/etcd:v3.5.16

        # # The `advertisedSubnets` field configures the networks to pick etcd advertised IP from.
        # advertisedSubnets:
        #     - 10.0.0.0/8
    # A list of urls that point to additional manifests.
    extraManifests: []
    #   - https://www.example.com/manifest1.yaml
    #   - https://www.example.com/manifest2.yaml

    # A list of inline Kubernetes manifests.
    inlineManifests: []
    #   - name: namespace-ci # Name of the manifest.
    #     contents: |- # Manifest contents as a string.
    #       apiVersion: v1
    #       kind: Namespace
    #       metadata:
    #       	name: ci

    
    # # A key used for the [encryption of secret data at rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).

    # # Decryption secret example (do not use in production!).
    # aescbcEncryptionSecret: z01mye6j16bspJYtTB/5SFX8j7Ph4JXxM2Xuu4vsBPM=

    # # Core DNS specific configuration options.
    # coreDNS:
    #     image: registry.k8s.io/coredns/coredns:v1.11.3 # The `image` field is an override to the default coredns image.

    # # External cloud provider configuration.
    # externalCloudProvider:
    #     enabled: true # Enable external cloud provider.
    #     # A list of urls that point to additional manifests for an external cloud provider.
    #     manifests:
    #         - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/v1.20.0-alpha.0/manifests/rbac.yaml
    #         - https://raw.githubusercontent.com/kubernetes/cloud-provider-aws/v1.20.0-alpha.0/manifests/aws-cloud-controller-manager-daemonset.yaml

    # # A map of key value pairs that will be added while fetching the extraManifests.
    # extraManifestHeaders:
    #     Token: "1234567"
    #     X-ExtraInfo: info

    # # Settings for admin kubeconfig generation.
    # adminKubeconfig:
    #     certLifetime: 1h0m0s # Admin kubeconfig certificate lifetime (default is 1 year).

    # # Allows running workload on control-plane nodes.
    # allowSchedulingOnControlPlanes: true

kind: Secret
metadata:
  creationTimestamp: null
  name: talos-cp01-userdata-cloudinit
  namespace: challer-talos-oemc01
